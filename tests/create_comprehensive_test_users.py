#!/usr/bin/env python3
"""
Comprehensive Role Testing Script for Job Matching Platform
==========================================================

This script creates test users for different roles and provides testing scenarios
for your hackathon job matching application.

Roles to test:
- job_seeker (default)
- employer  
- admin

Usage:
1. Run this script to create test users
2. Use the provided test scenarios to validate role functionality
3. Check role-based access controls
"""

import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import create_app, db
from app.models.user import User, UserProfile
from app.models.job import Company, Job
from datetime import datetime

def create_test_users():
    """Create test users for each role"""
    
    app = create_app()
    
    with app.app_context():
        # Clear existing test users (optional)
        print("üßπ Cleaning up existing test users...")
        User.query.filter(User.email.like('%test%')).delete()
        db.session.commit()
        
        test_users = []
        
        # 1. JOB SEEKER TEST USERS
        print("\nüë§ Creating Job Seeker Test Users...")
        
        job_seekers = [
            {
                'email': 'jobseeker1@test.com',
                'password': 'password123',
                'first_name': 'Alice',
                'last_name': 'Johnson',
                'role': 'job_seeker',
                'profile': {
                    'phone': '+1234567890',
                    'location': 'New York, NY',
                    'summary': 'Experienced software developer looking for new opportunities',
                    'skills': ['Python', 'JavaScript', 'React', 'Node.js'],
                    'experience_years': 3,
                    'education': [
                        {
                            'degree': 'Bachelor of Computer Science',
                            'institution': 'Tech University',
                            'year': 2020
                        }
                    ],
                    'work_experience': [
                        {
                            'company': 'StartupXYZ',
                            'position': 'Junior Developer',
                            'duration': '2020-2023',
                            'description': 'Developed web applications using React and Node.js'
                        }
                    ]
                }
            },
            {
                'email': 'jobseeker2@test.com',
                'password': 'password123',
                'first_name': 'Bob',
                'last_name': 'Smith',
                'role': 'job_seeker',
                'profile': {
                    'phone': '+1234567891',
                    'location': 'San Francisco, CA',
                    'summary': 'Data scientist with machine learning expertise',
                    'skills': ['Python', 'Machine Learning', 'SQL', 'TensorFlow'],
                    'experience_years': 5,
                    'education': [
                        {
                            'degree': 'Master of Data Science',
                            'institution': 'Data Institute',
                            'year': 2018
                        }
                    ]
                }
            }
        ]
        
        for user_data in job_seekers:
            user = User(
                email=user_data['email'],
                first_name=user_data['first_name'],
                last_name=user_data['last_name'],
                role=user_data['role']
            )
            user.set_password(user_data['password'])
            db.session.add(user)
            db.session.flush()  # Get the user ID
            
            # Create profile
            profile = UserProfile(
                user_id=user.id,
                **user_data['profile']
            )
            db.session.add(profile)
            test_users.append(user)
            print(f"‚úÖ Created job seeker: {user.email}")
        
        # 2. EMPLOYER TEST USERS
        print("\nüè¢ Creating Employer Test Users...")
        
        employers = [
            {
                'email': 'employer1@test.com',
                'password': 'password123',
                'first_name': 'Carol',
                'last_name': 'Davis',
                'role': 'employer',
                'profile': {
                    'phone': '+1234567892',
                    'location': 'Austin, TX',
                    'summary': 'HR Manager at TechCorp, recruiting top talent'
                }
            },
            {
                'email': 'employer2@test.com',
                'password': 'password123',
                'first_name': 'David',
                'last_name': 'Wilson',
                'role': 'employer',
                'profile': {
                    'phone': '+1234567893',
                    'location': 'Seattle, WA',
                    'summary': 'Startup founder looking for early employees'
                }
            }
        ]
        
        for user_data in employers:
            user = User(
                email=user_data['email'],
                first_name=user_data['first_name'],
                last_name=user_data['last_name'],
                role=user_data['role']
            )
            user.set_password(user_data['password'])
            db.session.add(user)
            db.session.flush()
            
            # Create profile
            profile = UserProfile(
                user_id=user.id,
                **user_data['profile']
            )
            db.session.add(profile)
            test_users.append(user)
            print(f"‚úÖ Created employer: {user.email}")
        
        # 3. ADMIN TEST USERS
        print("\nüîß Creating Admin Test Users...")
        
        admins = [
            {
                'email': 'admin@test.com',
                'password': 'admin123',
                'first_name': 'Admin',
                'last_name': 'User',
                'role': 'admin',
                'profile': {
                    'phone': '+1234567894',
                    'location': 'Remote',
                    'summary': 'Platform administrator'
                }
            }
        ]
        
        for user_data in admins:
            user = User(
                email=user_data['email'],
                first_name=user_data['first_name'],
                last_name=user_data['last_name'],
                role=user_data['role']
            )
            user.set_password(user_data['password'])
            db.session.add(user)
            db.session.flush()
            
            # Create profile
            profile = UserProfile(
                user_id=user.id,
                **user_data['profile']
            )
            db.session.add(profile)
            test_users.append(user)
            print(f"‚úÖ Created admin: {user.email}")
        
        # Commit all changes
        db.session.commit()
        
        print(f"\nüéâ Successfully created {len(test_users)} test users!")
        return test_users

def print_test_credentials():
    """Print test user credentials for easy reference"""
    
    print("\n" + "="*60)
    print("üîë TEST USER CREDENTIALS")
    print("="*60)
    
    print("\nüë§ JOB SEEKERS:")
    print("‚Ä¢ jobseeker1@test.com / password123 (Alice Johnson)")
    print("‚Ä¢ jobseeker2@test.com / password123 (Bob Smith)")
    
    print("\nüè¢ EMPLOYERS:")
    print("‚Ä¢ employer1@test.com / password123 (Carol Davis)")
    print("‚Ä¢ employer2@test.com / password123 (David Wilson)")
    
    print("\nüîß ADMIN:")
    print("‚Ä¢ admin@test.com / admin123 (Admin User)")
    
    print("\n" + "="*60)

def role_test_scenarios():
    """Print comprehensive test scenarios for each role"""
    
    print("\n" + "="*60)
    print("üß™ ROLE TESTING SCENARIOS")
    print("="*60)
    
    print("\n1Ô∏è‚É£ JOB SEEKER ROLE TESTING")
    print("-" * 40)
    print("‚úÖ SHOULD BE ABLE TO:")
    print("‚Ä¢ Register and login")
    print("‚Ä¢ View and edit profile")
    print("‚Ä¢ Upload resume")
    print("‚Ä¢ Search and browse jobs")
    print("‚Ä¢ Apply to jobs")
    print("‚Ä¢ View application history")
    print("‚Ä¢ Receive job recommendations")
    print("‚Ä¢ Update skills and experience")
    
    print("\n‚ùå SHOULD NOT BE ABLE TO:")
    print("‚Ä¢ Post jobs")
    print("‚Ä¢ View other users' applications")
    print("‚Ä¢ Access employer dashboard")
    print("‚Ä¢ Access admin panel")
    print("‚Ä¢ Manage job postings")
    
    print("\n2Ô∏è‚É£ EMPLOYER ROLE TESTING")
    print("-" * 40)
    print("‚úÖ SHOULD BE ABLE TO:")
    print("‚Ä¢ Register and login")
    print("‚Ä¢ Create company profile")
    print("‚Ä¢ Post job listings")
    print("‚Ä¢ Edit/delete own job postings")
    print("‚Ä¢ View applications for their jobs")
    print("‚Ä¢ Search candidate profiles")
    print("‚Ä¢ Manage application status")
    print("‚Ä¢ View hiring analytics")
    
    print("\n‚ùå SHOULD NOT BE ABLE TO:")
    print("‚Ä¢ Apply to jobs")
    print("‚Ä¢ View other employers' job applications")
    print("‚Ä¢ Access admin panel")
    print("‚Ä¢ Manage other users' accounts")
    print("‚Ä¢ Delete jobs posted by others")
    
    print("\n3Ô∏è‚É£ ADMIN ROLE TESTING")
    print("-" * 40)
    print("‚úÖ SHOULD BE ABLE TO:")
    print("‚Ä¢ Access admin dashboard")
    print("‚Ä¢ Manage all users")
    print("‚Ä¢ View all job postings")
    print("‚Ä¢ Moderate content")
    print("‚Ä¢ View system analytics")
    print("‚Ä¢ Manage platform settings")
    print("‚Ä¢ Handle user reports")
    print("‚Ä¢ Access all application data")
    
    print("\n‚ùå SHOULD NOT BE ABLE TO:")
    print("‚Ä¢ Apply to jobs (unless also job_seeker)")
    print("‚Ä¢ Post jobs (unless also employer)")
    
    print("\n4Ô∏è‚É£ SECURITY TESTING")
    print("-" * 40)
    print("üîí ACCESS CONTROL TESTS:")
    print("‚Ä¢ Try accessing admin routes as job_seeker")
    print("‚Ä¢ Try accessing employer routes as job_seeker")
    print("‚Ä¢ Try viewing other users' private data")
    print("‚Ä¢ Test JWT token expiration")
    print("‚Ä¢ Test password security")
    print("‚Ä¢ Test role escalation attempts")
    
    print("\n5Ô∏è‚É£ INTEGRATION TESTING")
    print("-" * 40)
    print("üîÑ WORKFLOW TESTS:")
    print("‚Ä¢ Complete job posting to application flow")
    print("‚Ä¢ Test AI matching algorithms")
    print("‚Ä¢ Test notification system")
    print("‚Ä¢ Test resume upload and parsing")
    print("‚Ä¢ Test search and filtering")
    
    print("\n" + "="*60)

def run_basic_role_tests():
    """Run basic automated tests for role functionality"""
    
    app = create_app()
    
    with app.app_context():
        print("\nü§ñ RUNNING BASIC ROLE TESTS...")
        
        # Test 1: Check if users exist
        job_seeker = User.query.filter_by(email='jobseeker1@test.com').first()
        employer = User.query.filter_by(email='employer1@test.com').first()
        admin = User.query.filter_by(email='admin@test.com').first()
        
        print("\nüìä USER VERIFICATION:")
        print(f"‚Ä¢ Job Seeker exists: {'‚úÖ' if job_seeker else '‚ùå'}")
        print(f"‚Ä¢ Employer exists: {'‚úÖ' if employer else '‚ùå'}")
        print(f"‚Ä¢ Admin exists: {'‚úÖ' if admin else '‚ùå'}")
        
        if job_seeker:
            print(f"‚Ä¢ Job Seeker role: {job_seeker.role}")
            print(f"‚Ä¢ Job Seeker profile: {'‚úÖ' if job_seeker.profile else '‚ùå'}")
        
        if employer:
            print(f"‚Ä¢ Employer role: {employer.role}")
            print(f"‚Ä¢ Employer profile: {'‚úÖ' if employer.profile else '‚ùå'}")
        
        if admin:
            print(f"‚Ä¢ Admin role: {admin.role}")
            print(f"‚Ä¢ Admin profile: {'‚úÖ' if admin.profile else '‚ùå'}")
        
        # Test 2: Password verification
        print("\nüîê PASSWORD VERIFICATION:")
        if job_seeker:
            print(f"‚Ä¢ Job Seeker password: {'‚úÖ' if job_seeker.check_password('password123') else '‚ùå'}")
        if employer:
            print(f"‚Ä¢ Employer password: {'‚úÖ' if employer.check_password('password123') else '‚ùå'}")
        if admin:
            print(f"‚Ä¢ Admin password: {'‚úÖ' if admin.check_password('admin123') else '‚ùå'}")

if __name__ == '__main__':
    print("üöÄ STARTING ROLE TESTING SETUP...")
    
    # Create test users
    create_test_users()
    
    # Print credentials
    print_test_credentials()
    
    # Print test scenarios
    role_test_scenarios()
    
    # Run basic tests
    run_basic_role_tests()
    
    print("\n‚ú® ROLE TESTING SETUP COMPLETE!")
    print("You can now start testing your application with different roles.")